From 75caccf910221002109f4419829b977017d4581e Mon Sep 17 00:00:00 2001
From: Willie Randolph <RazzleberryT@gmail.com>
Date: Fri, 18 Jul 2025 23:36:47 -0400
Subject: [PATCH 12/27] feat: enhance herb search and layout (#117)

---
 src/components/HerbCardAccordion.tsx | 112 ++++++++++++++++++---------
 src/components/HerbList.tsx          |  43 +++++-----
 src/hooks/useFilteredHerbs.ts        |  15 +++-
 src/pages/Database.tsx               |  18 ++++-
 src/utils/format.ts                  |   8 +-
 5 files changed, 134 insertions(+), 62 deletions(-)

diff --git a/src/components/HerbCardAccordion.tsx b/src/components/HerbCardAccordion.tsx
index 9f0f2ba..279f732 100644
--- a/src/components/HerbCardAccordion.tsx
+++ b/src/components/HerbCardAccordion.tsx
@@ -2,6 +2,7 @@ import React, { useState, KeyboardEvent } from 'react'
 import { motion, AnimatePresence } from 'framer-motion'
 import { Link, useNavigate } from 'react-router-dom'
 import { ChevronRight, Star } from 'lucide-react'
+import type Fuse from 'fuse.js'
 import type { Herb } from '../types'
 import { decodeTag, tagVariant, safetyColorClass } from '../utils/format'
 import { UNKNOWN, NOT_WELL_DOCUMENTED } from '../utils/constants'
@@ -17,6 +18,8 @@ import { tagCategoryMap } from '../data/tagCategoryMap'
 interface Props {
   herb: Herb
   highlight?: string
+  matches?: Fuse.FuseResultMatch[]
+  compact?: boolean
 }
 
 const categoryColors: Record<string, Parameters<typeof TagBadge>[0]['variant']> = {
@@ -47,6 +50,35 @@ const fieldTooltips: Record<string, string> = {
   dosage: 'Common oral or smoked amount for effects.',
 }
 
+const fullFields = [
+  'description',
+  'mechanismOfAction',
+  'therapeuticUses',
+  'sideEffects',
+  'contraindications',
+  'drugInteractions',
+  'preparation',
+  'dosage',
+  'pharmacokinetics',
+  'onset',
+  'duration',
+  'intensity',
+  'region',
+  'legalStatus',
+  'safetyRating',
+  'toxicity',
+  'toxicityLD50',
+]
+
+const compactFields = [
+  'description',
+  'preparation',
+  'dosage',
+  'onset',
+  'duration',
+  'intensity',
+]
+
 function gradientForCategory(cat: string): string {
   const c = cat.toLowerCase()
   if (c.includes('oneirogen')) return 'from-indigo-700/40 to-purple-700/40'
@@ -73,12 +105,12 @@ function safetyTier(rating: any, toxicity?: string): SafetyTier {
   return 'danger'
 }
 
-export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
+function HerbCardAccordionComponent({ herb, highlight = '', matches = [], compact = false }: Props) {
   const [tagsExpanded, setTagsExpanded] = useState(false)
   const [editTagsOpen, setEditTagsOpen] = useState(false)
   const [customTags, setCustomTags] = useLocalStorage<string[]>(`tags-${herb.id}`, herb.tags)
   const navigate = useNavigate()
-  const open = false
+  const [open, setOpen] = useState(false)
   const handleClick = () => {
     localStorage.setItem('focusHerb', herb.id)
     navigate(`/herb/${herb.id}`)
@@ -92,7 +124,7 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
     }
   }
 
-  const mark = (text: string) => {
+  const simpleMark = (text: string) => {
     if (!highlight) return text
     const escaped = highlight.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
     const regex = new RegExp(`(${escaped})`, 'ig')
@@ -102,6 +134,22 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
     )
   }
 
+  const mark = (text: string, field: string, index?: number) => {
+    const m = matches.find(
+      mm => mm.key === field && (index == null || mm.refIndex === index)
+    )
+    if (!m || !m.indices) return simpleMark(text)
+    let res = ''
+    let last = 0
+    m.indices.forEach(([s, e]) => {
+      res += text.slice(last, s)
+      res += `<mark class="rounded bg-yellow-500/40 px-1">${text.slice(s, e + 1)}</mark>`
+      last = e + 1
+    })
+    res += text.slice(last)
+    return res
+  }
+
   const gradient = gradientForCategory(herb.category)
   const tier = safetyTier(herb.safetyRating, herb.toxicity)
 
@@ -125,22 +173,24 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
       }}
       whileTap={{ scale: 0.97 }}
       transition={{ layout: { duration: 0.4, ease: 'easeInOut' } }}
-      className={`hover-glow card-contrast relative cursor-pointer overflow-hidden rounded-2xl bg-gradient-to-br ${gradient} border border-white/10 p-4 shadow-lg shadow-black/50 ring-1 ring-white/30 backdrop-blur-lg hover:shadow-psychedelic-pink/40 hover:drop-shadow-2xl focus:outline-none focus-visible:shadow-intense focus-visible:ring-2 focus-visible:ring-psychedelic-pink sm:p-6`}
+      className={`hover-glow card-contrast relative cursor-pointer overflow-hidden rounded-2xl bg-gradient-to-br ${gradient} border border-white/10 ${compact ? 'p-2 sm:p-3' : 'p-4 sm:p-6'} shadow-lg shadow-black/50 ring-1 ring-white/30 backdrop-blur-lg hover:shadow-psychedelic-pink/40 hover:drop-shadow-2xl focus:outline-none focus-visible:shadow-intense focus-visible:ring-2 focus-visible:ring-psychedelic-pink`}
     >
-      <motion.span
-        initial={{ opacity: 0, y: -4 }}
-        whileHover={{ opacity: 1, y: 0 }}
-        whileTap={{ opacity: 1, y: 0 }}
-        className='pointer-events-none absolute right-4 top-2 text-xs text-sand'
-      >
-        + More Info
-      </motion.span>
+      {!compact && (
+        <motion.span
+          initial={{ opacity: 0, y: -4 }}
+          whileHover={{ opacity: 1, y: 0 }}
+          whileTap={{ opacity: 1, y: 0 }}
+          className='pointer-events-none absolute right-4 top-2 text-xs text-sand'
+        >
+          + More Info
+        </motion.span>
+      )}
       <div className='flex items-start justify-between gap-4'>
         <div className='min-w-0'>
           <div className='flex flex-wrap items-baseline gap-1'>
             <h3
               className='text-shadow mb-0.5 font-herb text-xl text-white sm:text-2xl'
-              dangerouslySetInnerHTML={{ __html: mark(herb.name) }}
+              dangerouslySetInnerHTML={{ __html: mark(herb.name, 'name') }}
             />
             {tier && (
               <span
@@ -159,7 +209,7 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
           {herb.scientificName && (
             <p
               className='mt-0.5 text-xs italic text-sand'
-              dangerouslySetInnerHTML={{ __html: mark(herb.scientificName) }}
+              dangerouslySetInnerHTML={{ __html: mark(herb.scientificName, 'scientificName') }}
             />
           )}
           <div className='mt-1 flex flex-wrap items-center gap-2 text-sm text-sand sm:text-base'>
@@ -167,7 +217,7 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
               <TagBadge label={herb.category} variant={categoryColors[herb.category] || 'purple'} />
             )}
             {herb.effects?.length > 0 && (
-              <span dangerouslySetInnerHTML={{ __html: mark(herb.effects.join(', ')) }} />
+              <span dangerouslySetInnerHTML={{ __html: mark(herb.effects.join(', '), 'effects') }} />
             )}
           </div>
         </div>
@@ -186,11 +236,15 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
           <motion.span
             layout
             initial={false}
-            animate={{ rotate: open ? 90 : 0 }}
+            animate={{ rotate: compact ? 0 : open ? 90 : 0 }}
             transition={{ duration: 0.3 }}
             className='text-cyan-200 transition-transform'
+            onClick={e => {
+              e.stopPropagation()
+              setOpen(o => !o)
+            }}
           >
-            <ChevronRight size={18} />
+            {compact ? (open ? '-' : '+') : <ChevronRight size={18} />}
           </motion.span>
         </div>
       </div>
@@ -246,25 +300,7 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
               exit='hidden'
               className='space-y-3'
             >
-              {[
-                'description',
-                'mechanismOfAction',
-                'therapeuticUses',
-                'sideEffects',
-                'contraindications',
-                'drugInteractions',
-                'preparation',
-                'dosage',
-                'pharmacokinetics',
-                'onset',
-                'duration',
-                'intensity',
-                'region',
-                'legalStatus',
-                'safetyRating',
-                'toxicity',
-                'toxicityLD50',
-              ].map(key => {
+              {(compact ? compactFields : fullFields).map(key => {
                 const raw = (herb as any)[key]
                 const value =
                   typeof raw === 'string' && raw.trim() && raw !== 'No description provided.'
@@ -283,7 +319,7 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
                         {value}
                       </span>
                     ) : (
-                      value
+                      <span dangerouslySetInnerHTML={{ __html: mark(String(value), key) }} />
                     )}
                   </motion.div>
                 )
@@ -412,3 +448,5 @@ export default function HerbCardAccordion({ herb, highlight = '' }: Props) {
     </motion.div>
   )
 }
+
+export default React.memo(HerbCardAccordionComponent)
diff --git a/src/components/HerbList.tsx b/src/components/HerbList.tsx
index 0b95dd3..9770372 100644
--- a/src/components/HerbList.tsx
+++ b/src/components/HerbList.tsx
@@ -1,7 +1,9 @@
 import React from 'react'
 import { AnimatePresence, motion } from 'framer-motion'
 import type { Herb } from '../types'
+import type Fuse from 'fuse.js'
 import HerbCardAccordion from './HerbCardAccordion'
+import Pagination from './Pagination'
 
 const containerVariants = {
   hidden: {},
@@ -17,12 +19,23 @@ const itemVariants = {
 interface Props {
   herbs: Herb[]
   highlightQuery?: string
-  batchSize?: number
+  matches?: Record<string, Fuse.FuseResultMatch[]>
+  compact?: boolean
+  pageSize?: number
 }
-const HerbList: React.FC<Props> = ({ herbs, highlightQuery = '', batchSize = 24 }) => {
-  const [visible, setVisible] = React.useState(batchSize)
-
-  const showMore = () => setVisible(v => Math.min(v + batchSize, herbs.length))
+const HerbList: React.FC<Props> = React.memo(({
+  herbs,
+  highlightQuery = '',
+  matches = {},
+  compact = false,
+  pageSize = 30,
+}) => {
+  const [page, setPage] = React.useState(1)
+  const totalPages = Math.ceil(herbs.length / pageSize)
+  const current = React.useMemo(
+    () => herbs.slice((page - 1) * pageSize, page * pageSize),
+    [herbs, page, pageSize]
+  )
 
   if (herbs.length === 0) {
     return <p className='text-center text-sand/80'>No herbs match your search.</p>
@@ -31,7 +44,7 @@ const HerbList: React.FC<Props> = ({ herbs, highlightQuery = '', batchSize = 24
   return (
     <>
       <motion.div
-        key={herbs.map(h => h.id).join('-')}
+        key={current.map(h => h.id).join('-')}
         layout
         variants={containerVariants}
         initial='hidden'
@@ -39,31 +52,23 @@ const HerbList: React.FC<Props> = ({ herbs, highlightQuery = '', batchSize = 24
         className='grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3'
       >
         <AnimatePresence>
-          {herbs.slice(0, visible).map(h => (
+          {current.map(h => (
             <motion.div
               key={h.id || h.name}
               variants={itemVariants}
               layout
               exit='exit'
             >
-              <HerbCardAccordion herb={h} highlight={highlightQuery} />
+              <HerbCardAccordion herb={h} highlight={highlightQuery} matches={matches[h.id]} compact={compact} />
             </motion.div>
           ))}
         </AnimatePresence>
       </motion.div>
-      {visible < herbs.length && (
-        <div className='mt-6 text-center'>
-          <button
-            type='button'
-            onClick={showMore}
-            className='rounded-md bg-black/30 px-4 py-2 text-sand hover:bg-white/10 backdrop-blur-md'
-          >
-            Show More
-          </button>
-        </div>
+      {totalPages > 1 && (
+        <Pagination currentPage={page} totalPages={totalPages} onPageChange={setPage} />
       )}
     </>
   )
-}
+})
 
 export default HerbList
diff --git a/src/hooks/useFilteredHerbs.ts b/src/hooks/useFilteredHerbs.ts
index 28678ed..e94233a 100644
--- a/src/hooks/useFilteredHerbs.ts
+++ b/src/hooks/useFilteredHerbs.ts
@@ -62,12 +62,22 @@ export function useFilteredHerbs(herbs: Herb[] | undefined, options: Options = {
     [fuseData]
   )
 
+  const [matchMap, setMatchMap] = React.useState<Record<string, Fuse.FuseResultMatch[]>>({})
+
   const filtered = React.useMemo(() => {
-    let res = safeHerbs
+    let results: { item: Herb; matches?: Fuse.FuseResultMatch[] }[] = []
     const q = query.trim()
     if (q) {
-      res = fuse.search(q).map(r => r.item)
+      results = fuse.search(q)
+    } else {
+      results = safeHerbs.map(item => ({ item }))
     }
+    const map: Record<string, Fuse.FuseResultMatch[]> = {}
+    results.forEach(r => {
+      if (r.matches) map[r.item.id] = r.matches
+    })
+    setMatchMap(map)
+    let res = results.map(r => r.item)
     if (tags.length) {
       res = res.filter(h => {
         const matches = tags.map(t => h.tags.some(ht => canonicalTag(ht) === canonicalTag(t)))
@@ -88,6 +98,7 @@ export function useFilteredHerbs(herbs: Herb[] | undefined, options: Options = {
 
   return {
     filtered,
+    matches: matchMap,
     query,
     setQuery,
     tags,
diff --git a/src/pages/Database.tsx b/src/pages/Database.tsx
index 729e78e..787e029 100644
--- a/src/pages/Database.tsx
+++ b/src/pages/Database.tsx
@@ -16,6 +16,7 @@ import { useHerbFavorites } from '../hooks/useHerbFavorites'
 import SearchBar from '../components/SearchBar'
 import { useFilteredHerbs } from '../hooks/useFilteredHerbs'
 import { getLocal, setLocal } from '../utils/localStorage'
+import { useLocalStorage } from '../hooks/useLocalStorage'
 
 export default function Database() {
   const herbs = useHerbs()
@@ -23,6 +24,7 @@ export default function Database() {
   const { favorites } = useHerbFavorites()
   const {
     filtered,
+    matches,
     query,
     setQuery,
     tags: filteredTags,
@@ -35,6 +37,7 @@ export default function Database() {
     setFavoritesOnly,
     fuse,
   } = useFilteredHerbs(herbs, { favorites })
+  const [compactMode, setCompactMode] = useLocalStorage<boolean>('dbCompact', false)
   const [params, setParams] = useSearchParams()
 
   if (!herbs || herbs.length === 0) {
@@ -90,6 +93,12 @@ export default function Database() {
     return counts
   }, [herbs])
 
+  React.useEffect(() => {
+    if (Object.keys(tagCounts).length) {
+      console.log('Tag usage counts', tagCounts)
+    }
+  }, [tagCounts])
+
   const [filtersOpen, setFiltersOpen] = React.useState(false)
   const [showBar, setShowBar] = React.useState(true)
 
@@ -194,6 +203,13 @@ export default function Database() {
             >
               {favoritesOnly ? 'All Herbs' : 'My Herbs'}
             </button>
+            <button
+              type='button'
+              onClick={() => setCompactMode(c => !c)}
+              className='rounded-md bg-space-dark/70 px-3 py-2 text-sm text-sand backdrop-blur-md hover:bg-white/10'
+            >
+              {compactMode ? 'Full Cards' : 'Compact'}
+            </button>
             <button
               type='button'
               onClick={() => setFiltersOpen(o => !o)}
@@ -229,7 +245,7 @@ export default function Database() {
             </div>
           )}
           <CategoryAnalytics />
-          <HerbList herbs={filtered} highlightQuery={query} />
+          <HerbList herbs={filtered} highlightQuery={query} matches={matches} compact={compactMode} pageSize={30} />
         </div>
       </div>
     </>
diff --git a/src/utils/format.ts b/src/utils/format.ts
index 0ec1796..ecf2adf 100644
--- a/src/utils/format.ts
+++ b/src/utils/format.ts
@@ -1,3 +1,5 @@
+import { canonicalTag } from './tagUtils'
+
 export function decodeTag(tag: string): string {
   try {
     return JSON.parse(`"${tag}"`)
@@ -7,14 +9,14 @@ export function decodeTag(tag: string): string {
 }
 
 export function normalizeTag(tag: string): string {
-  const decoded = decodeTag(tag)
-  const key = decoded.toLowerCase()
+  const decoded = decodeTag(tag).trim()
+  const key = canonicalTag(decoded)
   if (key === 'ayahuasca-additive') return 'Ayahuasca'
   if (key === 'sleep') return 'Dream'
   if (key === 'sedative') return 'Sedation'
   if (/(intense|strong|powerful)/.test(key)) return '🔥 Intensity'
   if (/visionary|psychedelic|hallucinogenic/.test(key)) return 'Visionary'
-  return decoded
+  return key.charAt(0).toUpperCase() + key.slice(1)
 }
 
 export type TagCategory = 'Effect' | 'Preparation' | 'Safety' | 'Region' | 'Chemistry' | 'Other'
-- 
2.43.0

